import React, { useState, useEffect } from "react";
import { Modal, Form, Input, Select, Button, message, Row, Col } from "antd";
import {
  updateBlog,
  getBlogBySlug,
  getBlogCategories,
} from "../../services/blog";

const { TextArea } = Input;
const { Option } = Select;

const EditBlogModal = ({ visible, onCancel, onSuccess, blogData }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    if (visible && blogData) {
      fetchCategories();
    }
  }, [visible, blogData]);

  useEffect(() => {
    // Ch·ªâ populate form khi ƒë√£ c√≥ categories
    if (visible && blogData && categories.length > 0) {
      populateForm();
    }
  }, [visible, blogData, categories]);

  const fetchCategories = async () => {
    try {
      const response = await getBlogCategories();
      const categoryData = response.data.metadata || response.data;

      if (Array.isArray(categoryData) && categoryData.length > 0) {
        setCategories(categoryData);
      }
    } catch (error) {}
  };

  const populateForm = async () => {
    if (!blogData || !blogData.slug) return;

    try {
      const response = await getBlogBySlug(blogData.slug);
      const fullBlogData = response.data.metadata || response.data;

      // T√¨m category ID t·ª´ blog data
      let categoryId = null;
      if (
        typeof fullBlogData.category_id === "object" &&
        fullBlogData.category_id
      ) {
        // N·∫øu category object ch·ªâ c√≥ name, t√¨m category theo name
        if (fullBlogData.category_id.name && !fullBlogData.category_id._id) {
          const categoryName = fullBlogData.category_id.name;
          const foundCategoryByName = categories.find(
            (cat) => cat.name === categoryName
          );
          if (foundCategoryByName) {
            categoryId = foundCategoryByName._id;
          }
        } else {
          categoryId =
            fullBlogData.category_id._id || fullBlogData.category_id.id;
        }
      } else {
        categoryId = fullBlogData.category_id;
      }

      const formValues = {
        title: fullBlogData.title || "",
        author: fullBlogData.author || "",
        category_id: categoryId,
        short_description: fullBlogData.short_description || "",
        summary: fullBlogData.summary || "",
        content: Array.isArray(fullBlogData.content)
          ? fullBlogData.content.join("\n\n")
          : fullBlogData.content || "",
        article_datetime: fullBlogData.article_datetime
          ? new Date(fullBlogData.article_datetime).toISOString().slice(0, 16)
          : "",
        thumpnail: fullBlogData.thumpnail || "",
      };

      form.setFieldsValue(formValues);
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt blog");
    }
  };

  const handleSubmit = async (values) => {
    try {
      setLoading(true);

      const blogUpdateData = {
        title: values.title,
        author: values.author,
        category_id: values.category_id,
        short_description: values.short_description,
        summary: values.summary,
        content: values.content
          .split("\n\n")
          .map((paragraph) => paragraph.trim())
          .filter((paragraph) => paragraph.length > 0),
        thumpnail: values.thumpnail || "",
      };

      if (values.article_datetime) {
        blogUpdateData.article_datetime = new Date(
          values.article_datetime
        ).toISOString();
      }

      const blogId = blogData._id;
      await updateBlog(blogId, blogUpdateData);

      message.success("C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!");
      form.resetFields();
      onSuccess();
      onCancel();
    } catch (error) {
      if (error.response) {
        const status = error.response.status;
        const errorMessage = error.response.data?.message || "C√≥ l·ªói x·∫£y ra";

        if (status === 401) {
          message.error("B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√†i vi·∫øt");
        } else if (status === 400) {
          message.error(`D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${errorMessage}`);
        } else if (status === 404) {
          message.error("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt c·∫ßn c·∫≠p nh·∫≠t");
        } else {
          message.error(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt: ${errorMessage}`);
        }
      } else {
        message.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server");
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    form.resetFields();
    onCancel();
  };

  return (
    <Modal
      title="S·ª≠a b√†i vi·∫øt"
      open={visible}
      onCancel={handleCancel}
      footer={null}
      width={800}
      style={{ top: 20 }}
    >
      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
        style={{ maxHeight: "85vh", overflowY: "auto", padding: "0 16px" }}
      >
        <Row gutter={16}>
          <Col span={24}>
            <Form.Item
              label="Ti√™u ƒë·ªÅ"
              name="title"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ!" }]}
            >
              <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt" />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              label="T√°c gi·∫£"
              name="author"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p t√™n t√°c gi·∫£!" },
              ]}
            >
              <Input placeholder="Nh·∫≠p t√™n t√°c gi·∫£" />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              label="Danh m·ª•c"
              name="category_id"
              rules={[{ required: true, message: "Vui l√≤ng ch·ªçn danh m·ª•c!" }]}
            >
              <Select
                placeholder="Ch·ªçn danh m·ª•c"
                loading={categories.length === 0}
                showSearch
                filterOption={(input, option) =>
                  option?.children
                    ?.toLowerCase()
                    .indexOf(input.toLowerCase()) >= 0
                }
              >
                {categories.map((category) => (
                  <Option key={category._id} value={category._id}>
                    {category.name}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={24}>
            <Form.Item
              label="M√¥ t·∫£ ng·∫Øn"
              name="short_description"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ng·∫Øn!" }]}
            >
              <TextArea
                rows={3}
                placeholder="Nh·∫≠p m√¥ t·∫£ ng·∫Øn cho b√†i vi·∫øt"
                maxLength={300}
                showCount
              />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={24}>
            <Form.Item
              label="T√≥m t·∫Øt"
              name="summary"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√≥m t·∫Øt!" }]}
            >
              <TextArea
                rows={4}
                placeholder="Nh·∫≠p t√≥m t·∫Øt b√†i vi·∫øt"
                maxLength={500}
                showCount
              />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={24}>
            <Form.Item
              label="N·ªôi dung"
              name="content"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p n·ªôi dung!" }]}
            >
              <TextArea
                rows={10}
                placeholder="Nh·∫≠p n·ªôi dung b√†i vi·∫øt (m·ªói ƒëo·∫°n vƒÉn c√°ch nhau b·∫±ng 2 d√≤ng tr·ªëng)"
              />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              label="URL Thumbnail"
              name="thumpnail"
              rules={[{ type: "url", message: "Vui l√≤ng nh·∫≠p URL h·ª£p l·ªá!" }]}
            >
              <Input
                placeholder="https://example.com/image.jpg"
                addonBefore="üñºÔ∏è"
              />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item label="Ng√†y xu·∫•t b·∫£n" name="article_datetime">
              <Input type="datetime-local" placeholder="Ch·ªçn ng√†y xu·∫•t b·∫£n" />
            </Form.Item>
          </Col>
        </Row>

        <Row>
          <Col span={24}>
            <Form.Item style={{ textAlign: "right", marginBottom: 0 }}>
              <Button
                type="default"
                onClick={handleCancel}
                style={{ marginRight: 8 }}
              >
                H·ªßy
              </Button>
              <Button type="primary" htmlType="submit" loading={loading}>
                C·∫≠p nh·∫≠t b√†i vi·∫øt
              </Button>
            </Form.Item>
          </Col>
        </Row>
      </Form>
    </Modal>
  );
};

export default EditBlogModal;
