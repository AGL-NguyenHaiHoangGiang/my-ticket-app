import React, { useState, useEffect } from "react";
import { Modal, Form, Input, Select, DatePicker, Button, message } from "antd";
import { createBlog, getBlogCategories } from "../../services/blog";
import dayjs from "dayjs";

const { TextArea } = Input;
const { Option } = Select;

const AddBlogModal = ({ visible, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState([]);

  // Load blog categories khi modal m·ªü
  useEffect(() => {
    if (visible) {
      fetchCategories();
      // Reset form khi modal m·ªü
      form.resetFields();
    }
  }, [visible]);

  const fetchCategories = async () => {
    try {
      const response = await getBlogCategories();
      const categoryData = response.data.metadata || response.data;
      setCategories(categoryData);
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch danh m·ª•c");
    }
  };

  const handleSubmit = async (values) => {
    try {
      setLoading(true);

      const slug = values.title
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^a-z0-9\s-]/g, "")
        .replace(/\s+/g, "-")
        .replace(/-+/g, "-")
        .trim();

      const blogData = {
        title: values.title,
        slug: slug,
        author: values.author,
        category_id: values.category_id,
        short_description: values.short_description,
        summary: values.summary,
        content: values.content
          .split("\n\n")
          .map((paragraph) => paragraph.trim())
          .filter((paragraph) => paragraph.length > 0),
        thumpnail: values.thumpnail || "",
      };

      if (values.article_datetime) {
        blogData.article_datetime = values.article_datetime.toISOString();
      } else {
        blogData.article_datetime = new Date().toISOString();
      }

      const response = await createBlog(blogData);

      message.success("T·∫°o b√†i vi·∫øt th√†nh c√¥ng!");
      form.resetFields();
      onSuccess();
      onCancel();
    } catch (error) {
      if (error.response) {
        const status = error.response.status;
        const errorMessage = error.response.data?.message || "C√≥ l·ªói x·∫£y ra";

        if (status === 401) {
          message.error("B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o b√†i vi·∫øt");
        } else if (status === 400) {
          message.error(`D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${errorMessage}`);
        } else {
          message.error(`Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt: ${errorMessage}`);
        }
      } else {
        message.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      title="Th√™m b√†i vi·∫øt m·ªõi"
      open={visible}
      onCancel={onCancel}
      onOk={() => form.submit()}
      okText="T·∫°o b√†i vi·∫øt"
      cancelText="H·ªßy"
      confirmLoading={loading}
      width={800}
      bodyStyle={{ maxHeight: "70vh", overflowY: "auto" }}
    >
      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
        initialValues={{
          article_datetime: dayjs(),
        }}
      >
        <Form.Item
          name="title"
          label="Ti√™u ƒë·ªÅ"
          rules={[
            { required: true, message: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ!" },
            { min: 10, message: "Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±!" },
          ]}
        >
          <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..." />
        </Form.Item>

        <Form.Item
          name="short_description"
          label="M√¥ t·∫£ ng·∫Øn"
          rules={[
            { required: true, message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ng·∫Øn!" },
            { min: 20, message: "M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª±!" },
          ]}
        >
          <TextArea
            rows={3}
            placeholder="Nh·∫≠p m√¥ t·∫£ ng·∫Øn cho b√†i vi·∫øt..."
            showCount
            maxLength={200}
          />
        </Form.Item>

        <Form.Item
          name="summary"
          label="T√≥m t·∫Øt"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√≥m t·∫Øt!" }]}
        >
          <TextArea
            rows={4}
            placeholder="Nh·∫≠p t√≥m t·∫Øt chi ti·∫øt..."
            showCount
            maxLength={500}
          />
        </Form.Item>

        <div style={{ display: "flex", gap: "16px" }}>
          <Form.Item
            name="author"
            label="T√°c gi·∫£"
            style={{ flex: 1 }}
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n t√°c gi·∫£!" }]}
          >
            <Input placeholder="Nh·∫≠p t√™n t√°c gi·∫£..." />
          </Form.Item>

          <Form.Item
            name="category_id"
            label="Danh m·ª•c"
            style={{ flex: 1 }}
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn danh m·ª•c!" }]}
          >
            <Select placeholder="Ch·ªçn danh m·ª•c">
              {categories.map((category) => (
                <Option key={category._id} value={category._id}>
                  {category.name}
                </Option>
              ))}
            </Select>
          </Form.Item>
        </div>

        <Form.Item
          name="article_datetime"
          label="Ng√†y ƒëƒÉng"
          rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ng√†y ƒëƒÉng!" }]}
        >
          <DatePicker
            showTime
            style={{ width: "100%" }}
            format="DD/MM/YYYY HH:mm"
            placeholder="Ch·ªçn ng√†y v√† gi·ªù ƒëƒÉng"
          />
        </Form.Item>

        <Form.Item
          name="content"
          label="N·ªôi dung"
          rules={[
            { required: true, message: "Vui l√≤ng nh·∫≠p n·ªôi dung b√†i vi·∫øt!" },
            { min: 100, message: "N·ªôi dung ph·∫£i c√≥ √≠t nh·∫•t 100 k√Ω t·ª±!" },
          ]}
        >
          <TextArea
            rows={8}
            placeholder="Nh·∫≠p n·ªôi dung b√†i vi·∫øt (m·ªói ƒëo·∫°n vƒÉn c√°ch nhau b·∫±ng 2 d√≤ng tr·ªëng)"
            showCount
          />
        </Form.Item>

        <Form.Item
          label="URL Thumbnail"
          name="thumpnail"
          rules={[{ type: "url", message: "Vui l√≤ng nh·∫≠p URL h·ª£p l·ªá!" }]}
        >
          <Input placeholder="https://example.com/image.jpg" addonBefore="üñºÔ∏è" />
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default AddBlogModal;
